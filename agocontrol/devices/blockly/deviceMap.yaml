[ { devicetype: scenario, handled-by: scenario, internalid: 0e24d456-7546-443f-9939-0dbbba0a2a11, lastseen: 1395083092, name: "test scenario1", room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 0e24d456-7546-443f-9939-0dbbba0a2a11, handledBy: scenario, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: scenario, handled-by: scenario, internalid: 0e24d456-7546-443f-9939-0dbbba0a2a12, lastseen: 1395083092, name: "test scenario2", room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 0e24d456-7546-443f-9939-0dbbba0a2a12, handledBy: scenario, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: scenario, handled-by: scenario, internalid: 0e24d456-7546-443f-9939-0dbbba0a2a13, lastseen: 1395083092, name: "test scenario3", room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 0e24d456-7546-443f-9939-0dbbba0a2a13, handledBy: scenario, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: dummysun, handled-by: dummy, internalid: id1, lastseen: 1395083093, name: sun, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 13030eb2-d749-4599-b5bb-2ef80e3f64f6, handledBy: dummy, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: squeezebox, handled-by: squeezebox, internalid: '00:04:20:2c:6c:69', lastseen: 1395083092, name: asqueezebox, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 434e7792-599e-43d0-952a-3333495c0f62, handledBy: squeezebox, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", mediastate: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", play: "function () { var content = {}; content.uuid = uuid; content.command = 'play'; sendCommand(content); }", pause: "function () { var content = {}; content.uuid = uuid; content.command = 'pause'; sendCommand(content); }", stop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: agocontroller, handled-by: resolver, internalid: agocontroller, lastseen: 1395083092, name: agocontroller, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 43f418f5-27b2-4485-9c94-f19d4153c1ce, handledBy: resolver, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: dummybinarysensor, handled-by: dummy, internalid: id3, lastseen: 1395083092, name: binarysensor, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 4d58b035-e189-4934-9716-854542f4ca0a, handledBy: dummy, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", valueList: "function dependentObservable() { if (arguments.length > 0) { if (typeof writeFunction === \"function\") { // Writing a value writeFunction.apply(evaluatorFunctionTarget, arguments); } else { throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\"); } return this; // Permits chained assignments } else { // Reading the value if (!_hasBeenEvaluated) evaluateImmediate(); ko.dependencyDetection.registerDependency(dependentObservable); return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: dataloggercontroller, handled-by: datalogger, internalid: dataloggercontroller, lastseen: 1395083092, name: , room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: 54ee4c24-8169-4bec-84b5-c09bb20d288e, handledBy: datalogger, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: dummyclock, handled-by: dummy, internalid: id0, lastseen: 1395083093, name: clock, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: b60ad0ce-d812-4986-8b4b-1cf98f64f8e9, handledBy: dummy, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: eventcontroller, handled-by: event, internalid: eventcontroller, lastseen: 1395083092, name: , room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: b7915785-85fa-4ca5-996b-fa16a5b55b0c, handledBy: event, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: dummymediaplayer, handled-by: dummy, internalid: id4, lastseen: 1395083092, name: mediaplayer, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: b8e24b7b-9536-4981-a898-3a9cbb8a3cc2, handledBy: dummy, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: scenariocontroller, handled-by: scenario, internalid: scenariocontroller, lastseen: 1395083092, name: , room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: cca7fbba-387c-482f-81c8-aa1087469ba0, handledBy: scenario, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }, { devicetype: alertcontroller, handled-by: alert, internalid: alertcontroller, lastseen: 1395083092, name: alertcontroller, room: , stale: 0, state: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", values: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", uuid: e83da0e3-06d2-4a24-b3f1-9f97461c616b, handledBy: alert, timeStamp: "function observable() { if (arguments.length > 0) { // Write  // Ignore writes if the value hasn't changed if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) { observable.valueWillMutate(); _latestValue = arguments[0]; if (DEBUG) observable._latestValue = _latestValue; observable.valueHasMutated(); } return this; // Permits chained assignments } else { // Read ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation return _latestValue; } }", allOn: "function () { var content = {}; content.uuid = uuid; content.command = 'allon'; sendCommand(content); }", allOff: "function () { var content = {}; content.uuid = uuid; content.command = 'alloff'; sendCommand(content); }", turnOn: "function () { var content = {}; content.uuid = uuid; content.command = 'on'; sendCommand(content); }", turnOff: "function () { var content = {}; content.uuid = uuid; content.command = 'off'; sendCommand(content); }", turnStop: "function () { var content = {}; content.uuid = uuid; content.command = 'stop'; sendCommand(content); }", turnPush: "function () { var content = {}; content.uuid = uuid; content.command = 'push'; sendCommand(content); }", reset: "function () { var content = {}; content.uuid = uuid; content.command = 'reset'; sendCommand(content); }", customCommand: "function (params) { var content = {}; content.uuid = uuid; for ( var key in params) { if (params.hasOwnProperty(key)) {  content[key] = params[key]; } } sendCommand(content); }", execCommand: "function () { var command = document.getElementById(\"commandSelect\").options[document.getElementById(\"commandSelect\").selectedIndex].value; var content = {}; content.uuid = uuid; content.command = command; var params = document.getElementsByClassName(\"cmdParam\"); for ( var i = 0; i < params.length; i++) { content[params[i].name] = params[i].value; } sendCommand(content, function(res) { alert(\"Done\"); }); }", addDevice: "function (content, containername, callback) { var el = document.getElementsByClassName(containername); if (el !== undefined) el[0].innerHTML = ''; sendCommand(content, function(res) { if (el !== undefined) {  if (res.result.result.error == 0)  color = \"#00CC00\";  else  color = \"#CC0000\";  el[0].innerHTML = '<span style=\"color:' + color + '\">' + res.result.result.msg + '</span>'; } if (callback !== null)  callback(res); }); }", getDevices: "function (callback) { var content = {}; content.uuid = uuid; content.command = 'getdevices'; sendCommand(content, function(res) { if (callback !== undefined)  callback(res); }); }" }] 