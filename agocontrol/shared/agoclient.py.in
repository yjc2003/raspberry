"""@package agoclient
This is the agocontrol python client library.

An example device can be found here:
http://wiki.agocontrol.com/index.php/Example_Device
"""

import time
import syslog
import sys
import ConfigParser
import simplejson
from threading import Lock

from qpid.messaging import *
from qpid.util import URL
from qpid.log import enable, DEBUG, WARN

syslog.openlog(sys.argv[0], syslog.LOG_PID, syslog.LOG_DAEMON)

BINDIR = '@BINDIR@'
CONFDIR = '@CONFDIR@'
LOCALSTATEDIR = '@LOCALSTATEDIR@'


CONFIG_LOCK = Lock()


def get_config_option(section, option, default, filename=None):
    """Read a config option from a .ini style file."""
    config = ConfigParser.ConfigParser()
    CONFIG_LOCK.acquire(True)
    try:
        if filename:
            config.read(CONFDIR + '/conf.d/' + filename + '.conf')
        else:
            config.read(CONFDIR + '/conf.d/' + section + '.conf')
        value = config.get(section, option)
    except ConfigParser.Error, exception:
        syslog.syslog(syslog.LOG_WARNING,
            "Can't parse config file: " + str(exception))
        value = default
    finally:
        CONFIG_LOCK.release()
    return value


def set_config_option(section, option, value, filename=None):
    """Write out a config option to a .ini style file."""
    config = ConfigParser.ConfigParser()
    result = False
    CONFIG_LOCK.acquire(True)
    try:
        path = CONFDIR + '/conf.d/' + section + '.conf'
        if filename:
            path = CONFDIR + '/conf.d/' + filename + '.conf'
        #first of all read file
        config.read(path)
        #then update config
        if not config.has_section(section):
            config.add_section(section)
        config.set(section, option, str(value))
        #then write new file
        fpw = open(path, 'w')
        config.write(fpw)
        #finally close it
        fpw.close()
        result = True
    except ConfigParser.Error, exception:
        syslog.syslog(syslog.LOG_ERR,
            "Can't write config file: " + str(exception))
        result = False
    finally:
        CONFIG_LOCK.release()
    return result


class AgoConnection:
    """This is class will handle the connection to ago control."""
    def __init__(self, instance):
        """The constructor."""
        self.instance = instance
        syslog.syslog(syslog.LOG_NOTICE, "connecting to broker")
        broker = get_config_option("system", "broker", "localhost")
        username = get_config_option("system", "username", "agocontrol")
        password = get_config_option("system", "password", "letmein")
        self.connection = Connection(broker,
            username=username, password=password, reconnect=True)
        self.connection.open()
        self.session = self.connection.session()
        self.receiver = self.session.receiver(
            "agocontrol; {create: always, node: {type: topic}}")
        self.sender = self.session.sender(
            "agocontrol; {create: always, node: {type: topic}}")
        self.devices = {}
        self.uuids = {}
        self.handler = None
        self.eventhandler = None
        self.load_uuid_map()

    def __del__(self):
        self.session.acknowledge()
        self.session.close()
        self.connection.close()

    def add_handler(self, handler):
        """Add a command handler to be called when
        a command for a local device arrives."""
        self.handler = handler

    def add_event_handler(self, eventhandler):
        """Add an event handler to be called when an event arrives."""
        self.eventhandler = eventhandler

    def internal_id_to_uuid(self, internalid):
        """Convert a local (internal) id to an agocontrol UUID."""
        for uuid in self.uuids:
            if (self.uuids[uuid] == internalid):
                return uuid

    def uuid_to_internal_id(self, uuid):
        """Convert an agocontrol UUID to a local (internal) id."""
        try:
            return self.uuids[uuid]
        except KeyError, exception:
            syslog.syslog(syslog.LOG_WARNING,
                "Cannot translate uuid to internalid: " + str(exception))
            return None

    def store_uuid_map(self):
        """Store the mapping (dict) of UUIDs to
        internal ids into a JSON file."""
        try:
            with open(CONFDIR + '/uuidmap/' + self.instance +
                '.json', 'w') as outfile:
                simplejson.dump(self.uuids, outfile)
        except (OSError, IOError) as exception:
            syslog.syslog(syslog.LOG_ERR,
                "Cannot write uuid map file: " + str(exception))
        except ValueError, exception:  # includes simplejson error
            syslog.syslog(syslog.LOG_ERR,
                "Cannot encode uuid map: " + str(exception))

    def load_uuid_map(self):
        """Read the mapping (dict) of UUIDs to
        internal ids from a JSON file."""
        try:
            with open(CONFDIR + '/uuidmap/' + self.instance +
                '.json', 'r') as infile:
                self.uuids = simplejson.load(infile)
        except (OSError, IOError) as exception:
            syslog.syslog(syslog.LOG_ERR,
                "Cannot load uuid map file: " + str(exception))
        except ValueError, exception:  # includes simplejson error
            syslog.syslog(syslog.LOG_ERR,
                "Cannot decode uuid map: " + str(exception))

    def emit_device_announce(self, uuid, device):
        """Send a device announce event, this will
        be honored by the resolver component.
        You can find more information regarding the resolver
        here: http://wiki.agocontrol.com/index.php/Resolver """
        content = {}
        content["devicetype"] = device["devicetype"]
        content["uuid"] = uuid
        content["internalid"] = device["internalid"]
        content["handled-by"] = self.instance
        self.send_message("event.device.announce", content)

    def emit_device_remove(self, uuid):
        """Send a device remove event to the resolver"""
        content = {}
        content["uuid"] = uuid
        self.send_message("event.device.remove", content)

    def add_device(self, internalid, devicetype):
        """Add a device. Announcement to ago control will happen
        automatically. Commands to this device will be dispatched
        to the command handler.
        The devicetype corresponds to an entry in the schema."""
        if (self.internal_id_to_uuid(internalid) is None):
            self.uuids[str(uuid4())] = internalid
            self.store_uuid_map()
        device = {}
        device["devicetype"] = devicetype
        device["internalid"] = internalid
        self.devices[self.internal_id_to_uuid(internalid)] = device
        self.emit_device_announce(self.internal_id_to_uuid(internalid), device)

    def remove_device(self, internalid):
        """Remove a device."""
        if (self.internal_id_to_uuid(internalid) is not None):
            self.emit_device_remove(self.internal_id_to_uuid(internalid))
            del self.devices[self.internal_id_to_uuid(internalid)]

    def send_message(self, content):
        """Send message without subject."""
        return self.send_message(None, content)

    def send_message(self, subject, content):
        """Method to send an agocontrol message with a subject."""
        _content = content
        _content["instance"] = self.instance
        try:
            message = Message(content=_content, subject=subject)
            self.sender.send(message)
            return True
        except SendError, exception:
            syslog.syslog(syslog.LOG_ERR,
                "Can't send message: " + str(exception))
            return False

    def send_message_reply(self, content):
        """Send message and fetch reply."""
        _content = content
        _content["instance"] = self.instance
        try:
            replyuuid = str(uuid4())
            replyreceiver = self.session.receiver(
                "reply-%s; {create: always, delete: always}" % replyuuid)
            message = Message(content=_content)
            message.reply_to = 'reply-%s' % replyuuid
            self.sender.send(message)
            replymessage = replyreceiver.fetch(timeout=3)
            self.session.acknowledge()
        except Empty:
            replymessage = None
        except ReceiverError:
            replymessage = None
        except SendError:
            replymessage = False
        finally:
            replyreceiver.close()

        return replymessage

    def get_inventory(self):
        """Returns the inventory from the resolver."""
        content = {}
        content["command"] = "inventory"
        return self.send_message_reply(content)

    def emit_event(self, internal_id, event_type, level, unit):
        """This will send an event."""
        content = {}
        content["uuid"] = self.internal_id_to_uuid(internal_id)
        content["level"] = level
        content["unit"] = unit
        return self.send_message(event_type, content)

    def emit_event_raw(self, internal_id, event_type, content):
        """This will send content as event"""
        _content = content
        _content["uuid"] = self.internal_id_to_uuid(internal_id)
        return self.send_message(event_type, content)

    def report_devices(self):
        """Report all our devices."""
        syslog.syslog(syslog.LOG_NOTICE, "reporting child devices")
        for device in self.devices:
            self.emit_device_announce(device, self.devices[device])

    def _sendreply(self, addr, content):
        """Internal used to send a reply."""
        try:
            replysession = self.connection.session()
            replysender = replysession.sender(addr)
            response = Message(content)
            replysender.send(response)
        except SendError, exception:
            syslog.syslog(syslog.LOG_ERR,
                "can't send reply: " + str(exception))
        except AttributeError, exception:
            syslog.syslog(syslog.LOG_ERR,
                "can't send reply: " + str(exception))
        except MessagingError, exception:
            syslog.syslog(syslog.LOG_ERR,
                "can't send reply message: " + str(exception))
        finally:
            replysession.close()

    def run(self):
        """This will start command and event handling.
        Be aware that this is blocking."""
        syslog.syslog(syslog.LOG_NOTICE,
            "startup complete, waiting for messages")
        while (True):
            try:
                message = self.receiver.fetch()
                self.session.acknowledge()
                if (message.content and 'command' in message.content):
                    if (message.content['command'] == 'discover'):
                        self.report_devices()
                    else:
                        if ('uuid' in message.content and
                            message.content['uuid'] in self.devices):
                            #this is for one of our children
                            myid = self.uuid_to_internal_id(
                                message.content["uuid"])
                            if (myid is not None and self.handler):
                                returnval = self.handler(myid, message.content)
                                if (message.reply_to):
                                    replydata = {}
                                    if (isinstance(returnval, dict)):
                                        replydata = returnval
                                    else:
                                        replydata["result"] = returnval
                                    self._sendreply(
                                        message.reply_to, replydata)
                if (message.subject):
                    if ('event' in message.subject and self.eventhandler):
                        self.eventhandler(message.subject, message.content)
            except Empty, exception:
                pass

            except ReceiverError, exception:
                syslog.syslog(syslog.LOG_ERR,
                    "can't receive message: " + str(exception))
                time.sleep(0.05)
