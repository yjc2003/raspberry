/**
 * Agoblockly plugin
 * @returns {agoblockly}
 */
function agoBlocklyPlugin(deviceMap) {
    //members
    var self = this;
    self.hasNavigation = ko.observable(false);
    self.luaControllerUuid = null;
    self.availableScripts = ko.observableArray([]);
    self.selectedScript = ko.observable('');
    self.scriptName = ko.observable('untitled');
    self.scriptsCount = ko.observable(0);
    self.scriptSaved = ko.observable(true);
    self.scriptLoaded = false;

    //luacontroller uuid
    if( deviceMap!==undefined )
    {
        for( var i=0; i<deviceMap.length; i++ )
        {
            if( deviceMap[i].devicetype=='luacontroller' )
            {
                self.luaControllerUuid = deviceMap[i].uuid;
                break;
            }
        }
    }

    //get unconnected block
    self.getUnconnectedBlock = function() {
        var blocks = Blockly.mainWorkspace.getAllBlocks();
        for (var i = 0, block; block = blocks[i]; i++)
        {
            var connections = block.getConnections_(true);
            for (var j = 0, conn; conn = connections[j]; j++)
            {
                if (!conn.sourceBlock_ || (conn.type == Blockly.INPUT_VALUE || conn.type == Blockly.OUTPUT_VALUE) && !conn.targetConnection)
                {
                    return block;
                }
            }
        }
        return null;
    };
    
    //get block with warning
    self.getBlockWithWarning = function()
    {
        var blocks = Blockly.mainWorkspace.getAllBlocks();
        for (var i = 0, block; block = blocks[i]; i++)
        {
            if (block.warning)
            {
                return block;
            }
        }
        return null;
    };
    
    //blink specified block
    self.blinkBlock = function(block)
    {
        for(var i=300; i<3000; i=i+300)
        {
            setTimeout(function() { block.select(); },i);
            setTimeout(function() { block.unselect(); },i+150);
        }
    };

    //check blocks
    self.checkBlocks = function(notifySuccess) {
        var warningText;
        if( Blockly.mainWorkspace.getTopBlocks(false).length===0 )
        {
            //nothing to save
            notif.info('#nb');
            return;
        }
        var badBlock = self.getUnconnectedBlock();
        if (badBlock)
        {
            warningText = 'This block is not properly connected to other blocks.';
        }
        else
        {
            badBlock = self.getBlockWithWarning();
            if (badBlock)
            {
                warningText = 'Please fix the warning on this block.';
            }
        }

        if (badBlock)
        {
            notif.error(warningText);
            self.blinkBlock(badBlock);
            return false;
        }

        if( notifySuccess )
            notif.success('All blocks seems to be valid');

        return true;
    };

    //merge specified xml and lua code
    self.mergeXmlAndLua = function(xml, lua) {
        var out = '-- /!\\ Lua code generated by agoblockly. Do not edit manually.\n';
        out += '--[[\n' + xml + '\n]]\n';
        out += lua;
        return out;
    };

    //split specified script in xml and lua part
    self.unmergeXmlAndLua = function(script) {
        var out = {'error':false, 'xml':'', 'lua':''};
        //remove line breaks
        script = script.replace(/(\r\n|\n|\r)/gm,"");
        //extract xml and lua
        var re = /--.*--\[\[(.*)\]\](.*)/;
        var result = re.exec(script);
        if( result.length==3 )
        {
            out['xml'] = result[1];
            out['lua'] = result[2];
        }
        else
        {
            out['error'] = true;
        }
        return out;
    };

    //save script
    self.saveScript = function() {
        var scriptName = self.scriptName();
        //replace all whitespaces
        scriptName = scriptName.replace(/\s/g, "_");
        //append blockly_ prefix if necessary
        if( self.scriptName().indexOf('blockly_')!==0 )
        {
            scriptName = 'blockly_'+scriptName;
        }

        var content = {
            uuid: self.luaControllerUuid,
            command: 'setscript',
            name: scriptName,
            script: self.mergeXmlAndLua(self.getXml(), self.getLua())
        };
        sendCommand(content, function(res)
        {
            if( res!==undefined && res.result!==undefined && res.result!=='no-reply')
            {
                notif.success('#ss');
                self.scriptName(scriptName.replace('blockly_', ''));
                self.scriptSaved(true);
            }
            else
            {
                notif.fatal('#nr', 0);
            }
        });
    };

    //return xml code of blocks
    self.getXml = function() {
        var dom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
        return Blockly.Xml.domToText(dom);
    };

    //set blocks structure
    self.setXml = function(xml) {
        //clear existing blocks
        Blockly.mainWorkspace.clear();
        //load xml
        try {
            var dom = Blockly.Xml.textToDom(xml);
            Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, dom);
            Blockly.mainWorkspace.render();
        }
        catch(e) {
            //exception
            console.log('Exception during xml loading:'+e);
            return false;
        }
        //check if loaded
        if( Blockly.mainWorkspace.getTopBlocks(false).length===0 )
        {
            //no block in workspace
            return false;
        }
        else
        {
            //loaded successfully
            return true;
        }
    };

    //return lua code of blocks
    self.getLua = function() {
        return Blockly.Lua.workspaceToCode();
    };

    //callback when workspace changed
    self.onWorkspaceChanged = function() {
        if( Blockly.mainWorkspace.getTopBlocks(false).length>0 )
        {
            if( !self.scriptLoaded )
            {
                self.scriptSaved(false);
            }
            else if( self.scriptLoaded )
            {
                self.scriptLoaded = false;
            }
        }
    };

    //load scripts
    self.loadScripts = function(callback) {
        //get scripts
        var content = {
            uuid: self.luaControllerUuid,
            command: 'getscriptlist'
        };
        sendCommand(content, function(res) {
            if( res!==undefined && res.result!==undefined && res.result!=='no-reply')
            {
                //update ui variables
                self.availableScripts([]);
                for( var i=0; i<res.result.scriptlist.length; i++ )
                {
                    //only keep agoblockly scripts
                    if( res.result.scriptlist[i].indexOf('blockly_')===0 )
                    {
                        self.availableScripts.push(res.result.scriptlist[i].replace('blockly_',''));
                    }
                }
                self.scriptsCount(self.availableScripts().length);

                //callback
                if( callback!==undefined )
                    callback();
            }
            else
            {
                notif.fatal('#nr');
            }
        });
    };

    //load a script
    self.loadScript = function(scriptName, scriptContent) {
        //decode (base64) and extract xml from script content
        var script = self.unmergeXmlAndLua(B64.decode(scriptContent));
        if( !script['error'] )
        {
            if( self.setXml(script['xml']) )
            {
                //remove blockly_ prefix
                if( scriptName.indexOf('blockly_')===0 )
                {
                    scriptName = scriptName.replace('blockly_', '');
                }
                self.scriptName(scriptName);
                self.scriptLoaded = true;
                self.scriptSaved(true);
                notif.success('#sl');
            }
            else
            {
                //script corrupted
                notif.error('#sc');
            }
        }
        else
        {
            //script corrupted
            notif.error('#sc');
        }
    };

    //delete a script
    self.deleteScript = function(script, callback) {
        var content = {
            uuid: self.luaControllerUuid,
            command: 'delscript',
            name: script
        };
        sendCommand(content, function(res) {
            if( res!==undefined && res.result!==undefined && res.result!=='no-reply')
            {
                if( res.result.result===0 )
                {   
                    notif.success('#sd');
                    if( callback!==undefined )
                        callback();
                }
                else
                {
                    notif.error('#nd');
                }
            }
            else
            {
                notif.fatal('#nr');
            }
        });
    };

    //============================
    //ui events
    //============================

    //clear button
    self.clear = function() {
        if( Blockly.mainWorkspace.getTopBlocks(false).length<2 || window.confirm("Delete everything?") )
        {
            Blockly.mainWorkspace.clear();
            self.scriptName('untitled');
            self.scriptSaved(true);
        }
    };

    //check button
    self.check = function() {
        self.checkBlocks(true);
    };

    //save button
    self.save = function() {
        //check code
        if( !self.checkBlocks(false) )
        {
            //TODO allow script saving event if there are errors
            return;
        }

        //request script filename if necessary
        if( self.scriptName()==='untitled' )
        {
            $( "#saveDialog" ).dialog({
                modal: true,
                title: "Save script",
                height: 175,
                width: 375,
                buttons: {
                    "Ok": function() {
                        if( self.scriptName().length===0 || self.scriptName()==='untitled' )
                        {
                            //invalid script name
                            notif.warning('#sn');
                            self.scriptName('untitled');
                            $(this).dialog("close");
                            return;
                        }
                        else
                        {
                            //save script
                            self.saveScript();
                        }
                        $(this).dialog("close");
                    },
                    "Cancel": function() {
                        notif.info('#ns');
                        $(this).dialog("close");
                        return;
                    }
                }
            });
        }
        else
        {
            //script name already specified, save script
            self.saveScript();
        }
    };

    //delete script
    self.delete = function() {
        var content = {
            uuid: self.luaControllerUuid,
            command: 'delscript',
            name: 'TODO'
        };
        sendCommand(content, function(res) {
            if( res!==undefined && res.result!==undefined && res.result!=='no-reply')
            {
                if( res.result.result===0 )
                {
                    notif.error('#sd');
                }
                else
                {
                    //unable to delete
                    notif.error('#nd');
                }
            }
            else
            {
                notif.fatal('#nr');
            }
        });
    };

    //load code
    self.load = function() {
        //load scripts
        self.loadScripts(function()
        {
            //open script dialog
            $( "#loadDialog" ).dialog({
                modal: true,
                title: "Load script",
                height: 400,
                width: 600,
                buttons: {
                    "Load": function() {
                        var popup = this;
                        if( self.selectedScript()===undefined || self.selectedScript().length===0 )
                        {
                            notif.info('#pss');
                            return;
                        }
                                
                        var content2 = {
                            uuid: self.luaControllerUuid,
                            command: 'getscript',
                            name: 'blockly_'+self.selectedScript()
                        };
                        sendCommand(content2, function(res)
                        {
                            if( res!==undefined && res.result!==undefined && res.result!=='no-reply')
                            {
                                if( res.result.result===0 )
                                {
                                    self.loadScript(res.result.name ,res.result.script);
                                }
                                else
                                {
                                    //error occured
                                    notif.error(res.result.error);
                                }
                            }
                            else
                            {
                                notif.fatal('#nr');
                            }
                            $(popup).dialog("close");
                        });
                    },
                    Cancel: function() {
                        $(this).dialog("close");
                    },
                    "Delete": function() {
                        if( self.selectedScript()===undefined || self.selectedScript().length===0 )
                        {
                            notif.info('#pss');
                            return;
                        }

                        var msg = $('#cd').html();
                        if( confirm(msg) )
                        {
                            self.deleteScript('blockly_'+self.selectedScript(), function() {
                                self.selectedScript('');
                                self.loadScripts();
                            });
                        }
                    }
                }
            });
        });
    };

    //view lua source code
    self.viewlua = function() {
        //check code first
        if( !self.checkBlocks(false) )
            return;

        //fill dialog content
        var content = document.getElementById('luaContent');
        var code = self.getLua();
        content.textContent = code;
        if (typeof prettyPrintOne == 'function')
        {
            code = content.innerHTML;
            code = prettyPrintOne(code, 'lang-lua');
            content.innerHTML = code;
        }
        //open dialog
        $( "#luaDialog" ).dialog({
            modal: true,
            title: "LUA script",
            height: 600,
            width: 1024
        });
    };

    //view model
    this.blocklyViewModel = new ko.blockly.viewModel({
        onWorkspaceChanged: self.onWorkspaceChanged
    });
}

/**
 * Entry point: mandatory!
 */
function init_plugin()
{
    ko.blockly = {
        viewModel: function(config) {
            this.onWorkspaceChanged = config.onWorkspaceChanged;
        }
    };

    ko.bindingHandlers.blockly = {
        update: function(element, viewmodel) {
            element.innerHTML = "";
            //inject blockly
            Blockly.inject( document.getElementById('blocklyDiv'), {
                path: "/plugins/agoblockly/blockly/",
                toolbox: document.getElementById('toolbox')
            });
            //init agoblockly
            if( BlocklyAgocontrol!==null && BlocklyAgocontrol.init!==undefined )
            {
                BlocklyAgocontrol.init(schema, deviceMap, variables);
                //handle workspace changing event
                Blockly.addChangeListener(viewmodel().onWorkspaceChanged);
            }
            else
            {
                notif.error('Unable to configure Blockly! Event builder shouldn\'t work.');
            }
        }
    };

    model = new agoBlocklyPlugin(deviceMap);
    model.mainTemplate = function() {
        return templatePath + "agoblockly";
    }.bind(model);
    ko.applyBindings(model);
}
